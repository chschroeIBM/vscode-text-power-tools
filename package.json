{
	"name": "text-power-tools",
	"displayName": "Text Power Tools",
	"description": "All-in-one solution for text manipulation: filter lines (grep), remove lines, insert number sequences and GUIDs, format content as table, change case, converting numbers, generating fake data and more. Great for finding information in logs.",
	"keywords": [
		"text",
		"tools",
		"logs",
		"grep",
		"utilities",
		"filter",
		"filtering",
		"filter text",
		"filter lines",
		"case",
		"TextFX",
		"converter",
		"converting",
		"lorem",
		"ipsum",
		"lorem ipsum",
		"base64",
		"urlencode",
		"html entities",
		"xml entities",
		"zalgo",
		"clipboard",
		"faker",
		"fake data",
		"test data"
	],
	"version": "1.20.0",
	"publisher": "qcz",
	"private": true,
	"engines": {
		"vscode": "^1.50.0"
	},
	"license": "SEE LICENSE IN LICENSE.md",
	"icon": "images/icon.png",
	"repository": {
		"type": "git",
		"url": "https://github.com/qcz/vscode-text-power-tools.git"
	},
	"bugs": {
		"url": "https://github.com/qcz/vscode-text-power-tools/issues"
	},
	"categories": [
		"Other"
	],
	"galleryBanner": {
		"color": "#1e415e",
		"theme": "dark"
	},
	"activationEvents": [
		"onCommand:textPowerTools.filterLinesIncludingString",
		"onCommand:textPowerTools.filterLinesIncludingStringToNewEditor",
		"onCommand:textPowerTools.filterLinesMatchingRegex",
		"onCommand:textPowerTools.filterLinesMatchingRegexToNewEditor",
		"onCommand:textPowerTools.filterLinesNotIncludingString",
		"onCommand:textPowerTools.filterLinesNotIncludingStringToNewEditor",
		"onCommand:textPowerTools.filterLinesNotMatchingRegex",
		"onCommand:textPowerTools.filterLinesNotMatchingRegexToNewEditor",
		"onCommand:textPowerTools.extractInformation",
		"onCommand:textPowerTools.extractInformationToNewEditor",
		"onCommand:textPowerTools.countOccurrences",
		"onCommand:textPowerTools.countOccurrencesToNewEditor",
		"onCommand:textPowerTools.removeDuplicates",
		"onCommand:textPowerTools.removeBlankLines",
		"onCommand:textPowerTools.removeSurplusBlankLines",
		"onCommand:textPowerTools.removeControlCharacters",
		"onCommand:textPowerTools.insertDecimalNumbers",
		"onCommand:textPowerTools.insertDecimalNumbersStartingAt",
		"onCommand:textPowerTools.insertDecimalNumbersWithIncrements",
		"onCommand:textPowerTools.insertDecimalNumbersWithIncrementsStartingAt",
		"onCommand:textPowerTools.insertHexNumbers",
		"onCommand:textPowerTools.insertHexNumbersStartingAt",
		"onCommand:textPowerTools.insertHexNumbersWithIncrements",
		"onCommand:textPowerTools.insertHexNumbersWithIncrementsStartingAt",
		"onCommand:textPowerTools.insertRomanNumerals",
		"onCommand:textPowerTools.insertRomanNumeralsStartingAt",
		"onCommand:textPowerTools.insertRomanNumeralsWithIncrements",
		"onCommand:textPowerTools.insertRomanNumeralsWithIncrementsStartingAt",
		"onCommand:textPowerTools.insertLineNumbers",
		"onCommand:textPowerTools.insertLineNumbersFixedLength",
		"onCommand:textPowerTools.insertRelativeLineNumbers",
		"onCommand:textPowerTools.insertRelativeLineNumbersFixedLength",
		"onCommand:textPowerTools.insertSequence",
		"onCommand:textPowerTools.generateFakeData",
		"onCommand:textPowerTools.insertLowercaseLetterSequence",
		"onCommand:textPowerTools.insertUppercaseLetterSequence",
		"onCommand:textPowerTools.insertLowercaseGreekLetterSequence",
		"onCommand:textPowerTools.insertUppercaseGreekLetterSequence",
		"onCommand:textPowerTools.insertNatoPhoneticAlphabetSequence",
		"onCommand:textPowerTools.insertLongEnglishMonthNamesSequence",
		"onCommand:textPowerTools.insertShortEnglishMonthNamesSequence",
		"onCommand:textPowerTools.insertLongLocaleMonthNamesSequence",
		"onCommand:textPowerTools.insertShortLocaleMonthNamesSequence",
		"onCommand:textPowerTools.insertLongEnglishDayNamesSequence",
		"onCommand:textPowerTools.insertShortEnglishDayNamesSequence",
		"onCommand:textPowerTools.insertLongLocaleDayNamesSequence",
		"onCommand:textPowerTools.insertShortLocaleDayNamesSequence",
		"onCommand:textPowerTools.insertFullFilePath",
		"onCommand:textPowerTools.insertDirectoryPath",
		"onCommand:textPowerTools.insertFileName",
		"onCommand:textPowerTools.insertUnixTimestamp",
		"onCommand:textPowerTools.padStart",
		"onCommand:textPowerTools.padStartWithCustomString",
		"onCommand:textPowerTools.padEnd",
		"onCommand:textPowerTools.padEndWithCustomString",
		"onCommand:textPowerTools.formatContentAsTableByTabulator",
		"onCommand:textPowerTools.formatContentAsTableBySemicolon",
		"onCommand:textPowerTools.formatContentAsTableByComma",
		"onCommand:textPowerTools.formatContentAsTableByPipe",
		"onCommand:textPowerTools.formatContentAsTableByCustomCharacter",
		"onCommand:textPowerTools.formatContentAsTableBySemicolonWithPadding",
		"onCommand:textPowerTools.formatContentAsTableByPipeWithPadding",
		"onCommand:textPowerTools.formatContentAsTableByCustomCharacterWithPadding",
		"onCommand:textPowerTools.generateRandomGuids",
		"onCommand:textPowerTools.generateLoremIpsumSentence",
		"onCommand:textPowerTools.generateLoremIpsumParagraph",
		"onCommand:textPowerTools.changeCaseToCamelCase",
		"onCommand:textPowerTools.changeCaseToPascalCase",
		"onCommand:textPowerTools.changeCaseToSnakeCase",
		"onCommand:textPowerTools.changeCaseToDashCase",
		"onCommand:textPowerTools.changeCaseToConstantCase",
		"onCommand:textPowerTools.changeCaseToDotCase",
		"onCommand:textPowerTools.changeCaseToSwapCase",
		"onCommand:textPowerTools.copySelectionsToNewEditor",
		"onCommand:textPowerTools.convertDecimalNumbersToHexadecimal",
		"onCommand:textPowerTools.convertHexadecimalNumbersToDecimal",
		"onCommand:textPowerTools.convertToZalgoUltraLight",
		"onCommand:textPowerTools.convertToZalgoLight",
		"onCommand:textPowerTools.convertToZalgoMedium",
		"onCommand:textPowerTools.convertToZalgoHeavy",
		"onCommand:textPowerTools.urlEncodeText",
		"onCommand:textPowerTools.urlDecodeText",
		"onCommand:textPowerTools.encodeHtmlEntities",
		"onCommand:textPowerTools.encodeHtmlEntitiesWithNonAscii",
		"onCommand:textPowerTools.decodeHtmlEntities",
		"onCommand:textPowerTools.encodeXmlEntities",
		"onCommand:textPowerTools.decodeXmlEntities",
		"onCommand:textPowerTools.base64EncodeText",
		"onCommand:textPowerTools.base64EncodeTextOnEachLine",
		"onCommand:textPowerTools.base64DecodeText",
		"onCommand:textPowerTools.base64DecodeTextOnEachLine",
		"onCommand:textPowerTools.pasteTextSlot1Content",
		"onCommand:textPowerTools.pasteTextSlot2Content",
		"onCommand:textPowerTools.pasteTextSlot3Content",
		"onCommand:textPowerTools.pasteTextSlot4Content",
		"onCommand:textPowerTools.pasteTextSlot5Content",
		"onCommand:textPowerTools.setTextSlot1Content",
		"onCommand:textPowerTools.setTextSlot2Content",
		"onCommand:textPowerTools.setTextSlot3Content",
		"onCommand:textPowerTools.setTextSlot4Content",
		"onCommand:textPowerTools.setTextSlot5Content"
	],
	"main": "./dist/extension",
	"contributes": {
		"commands": [
			{
				"command": "textPowerTools.filterLinesIncludingString",
				"category": "Text Power Tools",
				"title": "Filter lines including a string"
			},
			{
				"command": "textPowerTools.filterLinesIncludingStringToNewEditor",
				"category": "Text Power Tools",
				"title": "Filter lines including a string into a new editor"
			},
			{
				"command": "textPowerTools.filterLinesMatchingRegex",
				"category": "Text Power Tools",
				"title": "Filter lines matching a regex (grep)"
			},
			{
				"command": "textPowerTools.filterLinesMatchingRegexToNewEditor",
				"category": "Text Power Tools",
				"title": "Filter lines matching a regex (grep) into a new editor"
			},
			{
				"command": "textPowerTools.filterLinesNotIncludingString",
				"category": "Text Power Tools",
				"title": "Filter lines not including a string"
			},
			{
				"command": "textPowerTools.filterLinesNotIncludingStringToNewEditor",
				"category": "Text Power Tools",
				"title": "Filter lines not including a string into a new editor"
			},
			{
				"command": "textPowerTools.filterLinesNotMatchingRegex",
				"category": "Text Power Tools",
				"title": "Filter lines not matching a regex (grep)"
			},
			{
				"command": "textPowerTools.filterLinesNotMatchingRegexToNewEditor",
				"category": "Text Power Tools",
				"title": "Filter lines not matching a regex (grep) into a new editor"
			},
			{
				"command": "textPowerTools.extractInformation",
				"category": "Text Power Tools",
				"title": "Extract information from text"
			},
			{
				"command": "textPowerTools.extractInformationToNewEditor",
				"category": "Text Power Tools",
				"title": "Extract information from text into a new editor"
			},
			{
				"command": "textPowerTools.countOccurrences",
				"category": "Text Power Tools",
				"title": "Count line occurrences"
			},
			{
				"command": "textPowerTools.countOccurrencesToNewEditor",
				"category": "Text Power Tools",
				"title": "Count line occurrences into a new editor"
			},
			{
				"command": "textPowerTools.removeDuplicates",
				"category": "Text Power Tools",
				"title": "Remove duplicated lines"
			},
			{
				"command": "textPowerTools.removeBlankLines",
				"category": "Text Power Tools",
				"title": "Remove blank lines"
			},
			{
				"command": "textPowerTools.removeSurplusBlankLines",
				"category": "Text Power Tools",
				"title": "Remove surplus blank lines"
			},
			{
				"command": "textPowerTools.removeControlCharacters",
				"category": "Text Power Tools",
				"title": "Remove control characters"
			},
			{
				"command": "textPowerTools.insertDecimalNumbers",
				"category": "Text Power Tools",
				"title": "Insert decimal number sequence"
			},
			{
				"command": "textPowerTools.insertDecimalNumbersStartingAt",
				"category": "Text Power Tools",
				"title": "Insert decimal number sequence starting at..."
			},
			{
				"command": "textPowerTools.insertDecimalNumbersWithIncrements",
				"category": "Text Power Tools",
				"title": "Insert decimal number sequence with custom increments"
			},
			{
				"command": "textPowerTools.insertDecimalNumbersWithIncrementsStartingAt",
				"category": "Text Power Tools",
				"title": "Insert decimal number sequence with custom increments starting at..."
			},
			{
				"command": "textPowerTools.insertHexNumbers",
				"category": "Text Power Tools",
				"title": "Insert hex number sequence"
			},
			{
				"command": "textPowerTools.insertHexNumbersStartingAt",
				"category": "Text Power Tools",
				"title": "Insert hex number sequence starting at..."
			},
			{
				"command": "textPowerTools.insertHexNumbersWithIncrements",
				"category": "Text Power Tools",
				"title": "Insert hex number sequence with custom increments"
			},
			{
				"command": "textPowerTools.insertHexNumbersWithIncrementsStartingAt",
				"category": "Text Power Tools",
				"title": "Insert hex number sequence with custom increments starting at..."
			},
			{
				"command": "textPowerTools.insertRomanNumerals",
				"category": "Text Power Tools",
				"title": "Insert Roman numeral sequence"
			},
			{
				"command": "textPowerTools.insertRomanNumeralsStartingAt",
				"category": "Text Power Tools",
				"title": "Insert Roman numeral sequence starting at..."
			},
			{
				"command": "textPowerTools.insertRomanNumeralsWithIncrements",
				"category": "Text Power Tools",
				"title": "Insert Roman numeral sequence with custom increments"
			},
			{
				"command": "textPowerTools.insertRomanNumeralsWithIncrementsStartingAt",
				"category": "Text Power Tools",
				"title": "Insert Roman numeral sequence with custom increments starting at..."
			},
			{
				"command": "textPowerTools.insertLineNumbers",
				"category": "Text Power Tools",
				"title": "Insert line numbers"
			},
			{
				"command": "textPowerTools.insertLineNumbersFixedLength",
				"category": "Text Power Tools",
				"title": "Insert fixed length line numbers"
			},
			{
				"command": "textPowerTools.insertRelativeLineNumbers",
				"category": "Text Power Tools",
				"title": "Insert line numbers starting with 1 at the first selected line"
			},
			{
				"command": "textPowerTools.insertRelativeLineNumbersFixedLength",
				"category": "Text Power Tools",
				"title": "Insert fixed line numbers starting with 1 at the first selected line"
			},
			{
				"command": "textPowerTools.insertSequence",
				"category": "Text Power Tools",
				"title": "Insert series of items..."
			},
			{
				"command": "textPowerTools.generateFakeData",
				"category": "Text Power Tools",
				"title": "Generate fake/random data..."
			},
			{
				"command": "textPowerTools.insertLowercaseLetterSequence",
				"category": "Text Power Tools",
				"title": "Insert series of lowercase letters"
			},
			{
				"command": "textPowerTools.insertUppercaseLetterSequence",
				"category": "Text Power Tools",
				"title": "Insert series of uppercase letters"
			},
			{
				"command": "textPowerTools.insertLowercaseGreekLetterSequence",
				"category": "Text Power Tools",
				"title": "Insert series of lowercase Greek letters"
			},
			{
				"command": "textPowerTools.insertUppercaseGreekLetterSequence",
				"category": "Text Power Tools",
				"title": "Insert series of uppercase Greek letters"
			},
			{
				"command": "textPowerTools.insertNatoPhoneticAlphabetSequence",
				"category": "Text Power Tools",
				"title": "Insert series of NATO phonetic alphabet items"
			},
			{
				"command": "textPowerTools.insertLongEnglishMonthNamesSequence",
				"category": "Text Power Tools",
				"title": "Insert series of long English month names"
			},
			{
				"command": "textPowerTools.insertShortEnglishMonthNamesSequence",
				"category": "Text Power Tools",
				"title": "Insert series of short English month names"
			},
			{
				"command": "textPowerTools.insertLongLocaleMonthNamesSequence",
				"category": "Text Power Tools",
				"title": "Insert series of long current/custom locale month names"
			},
			{
				"command": "textPowerTools.insertShortLocaleMonthNamesSequence",
				"category": "Text Power Tools",
				"title": "Insert series of short current/custom locale month names"
			},
			{
				"command": "textPowerTools.insertLongEnglishDayNamesSequence",
				"category": "Text Power Tools",
				"title": "Insert series of long English day names"
			},
			{
				"command": "textPowerTools.insertShortEnglishDayNamesSequence",
				"category": "Text Power Tools",
				"title": "Insert series of short English day names"
			},
			{
				"command": "textPowerTools.insertLongLocaleDayNamesSequence",
				"category": "Text Power Tools",
				"title": "Insert series of long current/custom locale day names"
			},
			{
				"command": "textPowerTools.insertShortLocaleDayNamesSequence",
				"category": "Text Power Tools",
				"title": "Insert series of short current/custom locale day names"
			},
			{
				"command": "textPowerTools.insertFullFilePath",
				"category": "Text Power Tools",
				"title": "Insert full path of the opened file"
			},
			{
				"command": "textPowerTools.insertDirectoryPath",
				"category": "Text Power Tools",
				"title": "Insert directory path of the opened file"
			},
			{
				"command": "textPowerTools.insertFileName",
				"category": "Text Power Tools",
				"title": "Insert file name of the opened file"
			},
			{
				"command": "textPowerTools.insertUnixTimestamp",
				"category": "Text Power Tools",
				"title": "Insert Unix timestamp"
			},
			{
				"command": "textPowerTools.padStart",
				"category": "Text Power Tools",
				"title": "Pad start (left) with default string"
			},
			{
				"command": "textPowerTools.padStartWithCustomString",
				"category": "Text Power Tools",
				"title": "Pad start (left) with custom string"
			},
			{
				"command": "textPowerTools.padEnd",
				"category": "Text Power Tools",
				"title": "Pad end (right) with default string"
			},
			{
				"command": "textPowerTools.padEndWithCustomString",
				"category": "Text Power Tools",
				"title": "Pad end (right) with custom string"
			},
			{
				"command": "textPowerTools.formatContentAsTableByTabulator",
				"category": "Text Power Tools",
				"title": "Format content as table using tabulator as splitter"
			},
			{
				"command": "textPowerTools.formatContentAsTableBySemicolon",
				"category": "Text Power Tools",
				"title": "Format content as table using semicolon as splitter"
			},
			{
				"command": "textPowerTools.formatContentAsTableByComma",
				"category": "Text Power Tools",
				"title": "Format content as table using comma as splitter"
			},
			{
				"command": "textPowerTools.formatContentAsTableByPipe",
				"category": "Text Power Tools",
				"title": "Format content as table using pipe as splitter"
			},
			{
				"command": "textPowerTools.formatContentAsTableByCustomCharacter",
				"category": "Text Power Tools",
				"title": "Format content as table using custom string as splitter"
			},
			{
				"command": "textPowerTools.formatContentAsTableBySemicolonWithPadding",
				"category": "Text Power Tools",
				"title": "Format content as table using semicolon as splitter (with padding)"
			},
			{
				"command": "textPowerTools.formatContentAsTableByPipeWithPadding",
				"category": "Text Power Tools",
				"title": "Format content as table using pipe as splitter (with padding)"
			},
			{
				"command": "textPowerTools.formatContentAsTableByCustomCharacterWithPadding",
				"category": "Text Power Tools",
				"title": "Format content as table using custom string as splitter (with padding)"
			},
			{
				"command": "textPowerTools.generateRandomGuids",
				"category": "Text Power Tools",
				"title": "Generate random GUIDs"
			},
			{
				"command": "textPowerTools.generateLoremIpsumSentence",
				"category": "Text Power Tools",
				"title": "Generate Lorem ipsum sentences"
			},
			{
				"command": "textPowerTools.generateLoremIpsumParagraph",
				"category": "Text Power Tools",
				"title": "Generate Lorem ipsum paragraphs"
			},
			{
				"command": "textPowerTools.changeCaseToCamelCase",
				"category": "Text Power Tools",
				"title": "Change case to camel case (camelCase)"
			},
			{
				"command": "textPowerTools.changeCaseToPascalCase",
				"category": "Text Power Tools",
				"title": "Change case to Pascal case (PascalCase)"
			},
			{
				"command": "textPowerTools.changeCaseToSnakeCase",
				"category": "Text Power Tools",
				"title": "Change case to snake case (snake_case)"
			},
			{
				"command": "textPowerTools.changeCaseToDashCase",
				"category": "Text Power Tools",
				"title": "Change case to dash case (dash-case)"
			},
			{
				"command": "textPowerTools.changeCaseToConstantCase",
				"category": "Text Power Tools",
				"title": "Change case to constant case (CONSTANT_CASE)"
			},
			{
				"command": "textPowerTools.changeCaseToDotCase",
				"category": "Text Power Tools",
				"title": "Change case to dot case (dot.case)"
			},
			{
				"command": "textPowerTools.changeCaseToSwapCase",
				"category": "Text Power Tools",
				"title": "Swap text case"
			},
			{
				"command": "textPowerTools.copySelectionsToNewEditor",
				"category": "Text Power Tools",
				"title": "Copy content of selections to a new editor"
			},
			{
				"command": "textPowerTools.convertHexadecimalNumbersToDecimal",
				"category": "Text Power Tools",
				"title": "Convert selected hexadecimal numbers to decimal"
			},
			{
				"command": "textPowerTools.convertDecimalNumbersToHexadecimal",
				"category": "Text Power Tools",
				"title": "Convert selected decimal numbers to hexadecimal"
			},
			{
				"command": "textPowerTools.convertToZalgoUltraLight",
				"category": "Text Power Tools",
				"title": "Convert selection to ultra light zalgo text"
			},
			{
				"command": "textPowerTools.convertToZalgoLight",
				"category": "Text Power Tools",
				"title": "Convert selection to light zalgo text"
			},
			{
				"command": "textPowerTools.convertToZalgoMedium",
				"category": "Text Power Tools",
				"title": "Convert selection to medium zalgo text"
			},
			{
				"command": "textPowerTools.convertToZalgoHeavy",
				"category": "Text Power Tools",
				"title": "Convert selection to heavy zalgo text"
			},
			{
				"command": "textPowerTools.urlEncodeText",
				"category": "Text Power Tools",
				"title": "URL encode text"
			},
			{
				"command": "textPowerTools.urlDecodeText",
				"category": "Text Power Tools",
				"title": "Decode URL encoded text"
			},
			{
				"command": "textPowerTools.encodeHtmlEntities",
				"category": "Text Power Tools",
				"title": "Encode HTML entities"
			},
			{
				"command": "textPowerTools.encodeHtmlEntitiesWithNonAscii",
				"category": "Text Power Tools",
				"title": "Encode HTML entities including non ASCII characters"
			},
			{
				"command": "textPowerTools.decodeHtmlEntities",
				"category": "Text Power Tools",
				"title": "Decode HTML entities"
			},
			{
				"command": "textPowerTools.encodeXmlEntities",
				"category": "Text Power Tools",
				"title": "Encode XML entities"
			},
			{
				"command": "textPowerTools.decodeXmlEntities",
				"category": "Text Power Tools",
				"title": "Decode XML entities"
			},
			{
				"command": "textPowerTools.base64EncodeText",
				"category": "Text Power Tools",
				"title": "Encode text with base64"
			},
			{
				"command": "textPowerTools.base64EncodeTextOnEachLine",
				"category": "Text Power Tools",
				"title": "Encode text with base64 on each line"
			},
			{
				"command": "textPowerTools.base64DecodeText",
				"category": "Text Power Tools",
				"title": "Decode base64 text"
			},
			{
				"command": "textPowerTools.base64DecodeTextOnEachLine",
				"category": "Text Power Tools",
				"title": "Decode base64 text on each line"
			},
			{
				"command": "textPowerTools.pasteTextSlot1Content",
				"category": "Text Power Tools",
				"title": "Paste text slot 1 content"
			},
			{
				"command": "textPowerTools.pasteTextSlot2Content",
				"category": "Text Power Tools",
				"title": "Paste text slot 2 content"
			},
			{
				"command": "textPowerTools.pasteTextSlot3Content",
				"category": "Text Power Tools",
				"title": "Paste text slot 3 content"
			},
			{
				"command": "textPowerTools.pasteTextSlot4Content",
				"category": "Text Power Tools",
				"title": "Paste text slot 4 content"
			},
			{
				"command": "textPowerTools.pasteTextSlot5Content",
				"category": "Text Power Tools",
				"title": "Paste text slot 5 content"
			},
			{
				"command": "textPowerTools.setTextSlot1Content",
				"category": "Text Power Tools",
				"title": "Set text slot 1 content"
			},
			{
				"command": "textPowerTools.setTextSlot2Content",
				"category": "Text Power Tools",
				"title": "Set text slot 2 content"
			},
			{
				"command": "textPowerTools.setTextSlot3Content",
				"category": "Text Power Tools",
				"title": "Set text slot 3 content"
			},
			{
				"command": "textPowerTools.setTextSlot4Content",
				"category": "Text Power Tools",
				"title": "Set text slot 4 content"
			},
			{
				"command": "textPowerTools.setTextSlot5Content",
				"category": "Text Power Tools",
				"title": "Set text slot 5 content"
			}
		],
		"menus": {
			"editor/context": [
				{
					"submenu": "textPowerTools.editorContextMain",
					"group": "t_textPowerTools"
				}
			],
			"textPowerTools.editorContextMain": [
				{
					"submenu": "textPowerTools.filterLines",
					"group": "tpt_01_filterAndExtract@1"
				},
				{
					"submenu": "textPowerTools.extraction",
					"group": "tpt_01_filterAndExtract@2"
				},
				{
					"submenu": "textPowerTools.formatContent",
					"group": "tpt_02_formatting@1"
				},
				{
					"submenu": "textPowerTools.changeCase",
					"group": "tpt_02_formatting@2"
				},
				{
					"submenu": "textPowerTools.generateFakeContent",
					"group": "tpt_10_generate@1"
				},
				{
					"submenu": "textPowerTools.insertFacts",
					"group": "tpt_10_generate@2"
				},
				{
					"submenu": "textPowerTools.insertNumbers",
					"group": "tpt_10_generate@3"
				},
				{
					"submenu": "textPowerTools.insertSequences",
					"group": "tpt_10_generate@4"
				},
				{
					"submenu": "textPowerTools.textSlots",
					"group": "tpt_12_clipboardLike@1"
				},
				{
					"submenu": "textPowerTools.convert",
					"group": "tpt_14_conversion@1"
				},
				{
					"submenu": "textPowerTools.encodeDecode",
					"group": "tpt_14_conversion@2"
				},
				{
					"submenu": "textPowerTools.remove",
					"group": "tpt_20_remove"
				},
				{
					"command": "textPowerTools.copySelectionsToNewEditor",
					"group": "tpt_100_copy",
					"when": "editorHasSelection"
				}
			],
			"textPowerTools.filterLines": [
				{
					"command": "textPowerTools.filterLinesIncludingString",
					"group": "tpt_filterLines_including@1"
				},
				{
					"command": "textPowerTools.filterLinesIncludingStringToNewEditor",
					"group": "tpt_filterLines_including@2"
				},
				{
					"command": "textPowerTools.filterLinesMatchingRegex",
					"group": "tpt_filterLines_including@3"
				},
				{
					"command": "textPowerTools.filterLinesMatchingRegexToNewEditor",
					"group": "tpt_filterLines_including@4"
				},
				{
					"command": "textPowerTools.filterLinesNotIncludingString",
					"group": "tpt_filterLines_notIncluding@1"
				},
				{
					"command": "textPowerTools.filterLinesNotIncludingStringToNewEditor",
					"group": "tpt_filterLines_notIncluding@2"
				},
				{
					"command": "textPowerTools.filterLinesNotMatchingRegex",
					"group": "tpt_filterLines_notIncluding@3"
				},
				{
					"command": "textPowerTools.filterLinesNotMatchingRegexToNewEditor",
					"group": "tpt_filterLines_notIncluding@4"
				}
			],
			"textPowerTools.extraction": [
				{
					"command": "textPowerTools.extractInformation",
					"group": "tpt_1_extractInfo@1"
				},
				{
					"command": "textPowerTools.extractInformationToNewEditor",
					"group": "tpt_1_extractInfo@2"
				},
				{
					"command": "textPowerTools.countOccurrences",
					"group": "tpt_2_countOccurrences@1"
				},
				{
					"command": "textPowerTools.countOccurrencesToNewEditor",
					"group": "tpt_2_countOccurrences@2"
				}
			],
			"textPowerTools.formatContent": [
				{
					"command": "textPowerTools.padStart",
					"group": "tpt_1_pad@1"
				},
				{
					"command": "textPowerTools.padStartWithCustomString",
					"group": "tpt_1_pad@2"
				},
				{
					"command": "textPowerTools.padEnd",
					"group": "tpt_1_pad@3"
				},
				{
					"command": "textPowerTools.padEndWithCustomString",
					"group": "tpt_1_pad@4"
				},
				{
					"command": "textPowerTools.formatContentAsTableByTabulator",
					"group": "tpt_2_formatContentAsTable@1"
				},
				{
					"command": "textPowerTools.formatContentAsTableBySemicolon",
					"group": "tpt_2_formatContentAsTable@2"
				},
				{
					"command": "textPowerTools.formatContentAsTableByComma",
					"group": "tpt_2_formatContentAsTable@3"
				},
				{
					"command": "textPowerTools.formatContentAsTableByPipe",
					"group": "tpt_2_formatContentAsTable@4"
				},
				{
					"command": "textPowerTools.formatContentAsTableByCustomCharacter",
					"group": "tpt_2_formatContentAsTable@5"
				},
				{
					"command": "textPowerTools.formatContentAsTableBySemicolonWithPadding",
					"group": "tpt_2_formatContentAsTable@6"
				},
				{
					"command": "textPowerTools.formatContentAsTableByPipeWithPadding",
					"group": "tpt_2_formatContentAsTable@7"
				},
				{
					"command": "textPowerTools.formatContentAsTableByCustomCharacterWithPadding",
					"group": "tpt_2_formatContentAsTable@8"
				}
			],
			"textPowerTools.changeCase": [
				{
					"command": "textPowerTools.changeCaseToCamelCase",
					"group": "tpt_changeCase@1"
				},
				{
					"command": "textPowerTools.changeCaseToPascalCase",
					"group": "tpt_changeCase@2"
				},
				{
					"command": "textPowerTools.changeCaseToSnakeCase",
					"group": "tpt_changeCase@3"
				},
				{
					"command": "textPowerTools.changeCaseToDashCase",
					"group": "tpt_changeCase@4"
				},
				{
					"command": "textPowerTools.changeCaseToConstantCase",
					"group": "tpt_changeCase@5"
				},
				{
					"command": "textPowerTools.changeCaseToDotCase",
					"group": "tpt_changeCase@6"
				},
				{
					"command": "textPowerTools.changeCaseToSwapCase",
					"group": "tpt_changeCase@7"
				}
			],
			"textPowerTools.insertFacts": [
				{
					"command": "textPowerTools.insertFullFilePath",
					"group": "tpt_1_insertFileSystemStuff@1"
				},
				{
					"command": "textPowerTools.insertDirectoryPath",
					"group": "tpt_1_insertFileSystemStuff@2"
				},
				{
					"command": "textPowerTools.insertFileName",
					"group": "tpt_1_insertFileSystemStuff@3"
				},
				{
					"command": "textPowerTools.insertUnixTimestamp",
					"group": "tpt_1_insertTimeStuff@1"
				}
			],
			"textPowerTools.insertNumbers": [
				{
					"command": "textPowerTools.insertDecimalNumbers",
					"group": "tpt_1_insertDecimalNumbers@1"
				},
				{
					"command": "textPowerTools.insertDecimalNumbersStartingAt",
					"group": "tpt_1_insertDecimalNumbers@2"
				},
				{
					"command": "textPowerTools.insertDecimalNumbersWithIncrements",
					"group": "tpt_1_insertDecimalNumbers@3"
				},
				{
					"command": "textPowerTools.insertDecimalNumbersWithIncrementsStartingAt",
					"group": "tpt_2_insertDecimalNumbers@4"
				},
				{
					"command": "textPowerTools.insertHexNumbers",
					"group": "tpt_2_insertHexNumbers@1"
				},
				{
					"command": "textPowerTools.insertHexNumbersStartingAt",
					"group": "tpt_2_insertHexNumbers@2"
				},
				{
					"command": "textPowerTools.insertHexNumbersWithIncrements",
					"group": "tpt_2_insertHexNumbers@3"
				},
				{
					"command": "textPowerTools.insertHexNumbersWithIncrementsStartingAt",
					"group": "tpt_2_insertHexNumbers@4"
				},
				{
					"command": "textPowerTools.insertRomanNumerals",
					"group": "tpt_2_insertRomanNumerals@1"
				},
				{
					"command": "textPowerTools.insertRomanNumeralsStartingAt",
					"group": "tpt_2_insertRomanNumerals@2"
				},
				{
					"command": "textPowerTools.insertRomanNumeralsWithIncrements",
					"group": "tpt_2_insertRomanNumerals@3"
				},
				{
					"command": "textPowerTools.insertRomanNumeralsWithIncrementsStartingAt",
					"group": "tpt_2_insertRomanNumerals@4"
				},
				{
					"command": "textPowerTools.insertLineNumbers",
					"group": "tpt_3_insertLineNumbers@1"
				},
				{
					"command": "textPowerTools.insertLineNumbersFixedLength",
					"group": "tpt_3_insertLineNumbers@2"
				},
				{
					"command": "textPowerTools.insertRelativeLineNumbers",
					"group": "tpt_3_insertLineNumbers@3"
				},
				{
					"command": "textPowerTools.insertRelativeLineNumbersFixedLength",
					"group": "tpt_3_insertLineNumbers@4"
				}
			],
			"textPowerTools.insertSequences": [
				{
					"command": "textPowerTools.insertSequence",
					"group": "tpt_1_sequence@1"
				},
				{
					"command": "textPowerTools.insertLowercaseLetterSequence",
					"group": "tpt_2_letters@1"
				},
				{
					"command": "textPowerTools.insertUppercaseLetterSequence",
					"group": "tpt_2_letters@2"
				},
				{
					"command": "textPowerTools.insertLowercaseGreekLetterSequence",
					"group": "tpt_2_letters@3"
				},
				{
					"command": "textPowerTools.insertUppercaseGreekLetterSequence",
					"group": "tpt_2_letters@4"
				},
				{
					"command": "textPowerTools.insertNatoPhoneticAlphabetSequence",
					"group": "tpt_3_words@1"
				},
				{
					"command": "textPowerTools.insertLongEnglishMonthNamesSequence",
					"group": "tpt_4_englishDateRelated@1"
				},
				{
					"command": "textPowerTools.insertShortEnglishMonthNamesSequence",
					"group": "tpt_4_englishDateRelated@2"
				},
				{
					"command": "textPowerTools.insertLongEnglishDayNamesSequence",
					"group": "tpt_4_englishDateRelated@3"
				},
				{
					"command": "textPowerTools.insertShortEnglishDayNamesSequence",
					"group": "tpt_4_englishDateRelated@4"
				},
				{
					"command": "textPowerTools.insertLongLocaleMonthNamesSequence",
					"group": "tpt_5_localeDateRelated@1"
				},
				{
					"command": "textPowerTools.insertShortLocaleMonthNamesSequence",
					"group": "tpt_5_localeDateRelated@2"
				},
				{
					"command": "textPowerTools.insertLongLocaleDayNamesSequence",
					"group": "tpt_5_localeDateRelated@3"
				},
				{
					"command": "textPowerTools.insertShortLocaleDayNamesSequence",
					"group": "tpt_5_localeDateRelated@4"
				}
			],
			"textPowerTools.textSlots": [
				{
					"command": "textPowerTools.pasteTextSlot1Content",
					"group": "tpt_1_pasteTextSlot@1"
				},
				{
					"command": "textPowerTools.pasteTextSlot2Content",
					"group": "tpt_1_pasteTextSlot@2"
				},
				{
					"command": "textPowerTools.pasteTextSlot3Content",
					"group": "tpt_1_pasteTextSlot@3"
				},
				{
					"command": "textPowerTools.pasteTextSlot4Content",
					"group": "tpt_1_pasteTextSlot@4"
				},
				{
					"command": "textPowerTools.pasteTextSlot5Content",
					"group": "tpt_1_pasteTextSlot@5"
				},
				{
					"command": "textPowerTools.setTextSlot1Content",
					"group": "tpt_2_setTextSlot@1"
				},
				{
					"command": "textPowerTools.setTextSlot2Content",
					"group": "tpt_2_setTextSlot@2"
				},
				{
					"command": "textPowerTools.setTextSlot3Content",
					"group": "tpt_2_setTextSlot@3"
				},
				{
					"command": "textPowerTools.setTextSlot4Content",
					"group": "tpt_2_setTextSlot@4"
				},
				{
					"command": "textPowerTools.setTextSlot5Content",
					"group": "tpt_2_setTextSlot@5"
				}
			],
			"textPowerTools.generateFakeContent": [
				{
					"command": "textPowerTools.generateFakeData",
					"group": "tpt_1_sequence@2"
				},
				{
					"command": "textPowerTools.generateRandomGuids",
					"group": "tpt_2_generateGuid@1"
				},
				{
					"command": "textPowerTools.generateLoremIpsumSentence",
					"group": "tpt_3_generateLoremIpsum@1"
				},
				{
					"command": "textPowerTools.generateLoremIpsumParagraph",
					"group": "tpt_3_generateLoremIpsum@3"
				}
			],
			"textPowerTools.convert": [
				{
					"command": "textPowerTools.convertDecimalNumbersToHexadecimal",
					"group": "tpt_1_convertNumbers@1"
				},
				{
					"command": "textPowerTools.convertHexadecimalNumbersToDecimal",
					"group": "tpt_1_convertNumbers@2"
				},
				{
					"command": "textPowerTools.convertToZalgoUltraLight",
					"group": "tpt_2_zalgo@1"
				},
				{
					"command": "textPowerTools.convertToZalgoLight",
					"group": "tpt_2_zalgo@2"
				},
				{
					"command": "textPowerTools.convertToZalgoMedium",
					"group": "tpt_2_zalgo@3"
				},
				{
					"command": "textPowerTools.convertToZalgoHeavy",
					"group": "tpt_2_zalgo@4"
				}
			],
			"textPowerTools.encodeDecode": [
				{
					"command": "textPowerTools.urlEncodeText",
					"group": "tpt_1_urlEncode@1"
				},
				{
					"command": "textPowerTools.urlDecodeText",
					"group": "tpt_1_urlEncode@2"
				},
				{
					"command": "textPowerTools.encodeHtmlEntities",
					"group": "tpt_2_htmlXml@1"
				},
				{
					"command": "textPowerTools.encodeHtmlEntitiesWithNonAscii",
					"group": "tpt_2_htmlXml@2"
				},
				{
					"command": "textPowerTools.decodeHtmlEntities",
					"group": "tpt_2_htmlXml@3"
				},
				{
					"command": "textPowerTools.encodeXmlEntities",
					"group": "tpt_2_htmlXml@4"
				},
				{
					"command": "textPowerTools.decodeXmlEntities",
					"group": "tpt_2_htmlXml@4"
				},
				{
					"command": "textPowerTools.base64EncodeText",
					"group": "tpt_3_base64@1"
				},
				{
					"command": "textPowerTools.base64EncodeTextOnEachLine",
					"group": "tpt_3_base64@2"
				},
				{
					"command": "textPowerTools.base64DecodeText",
					"group": "tpt_3_base64@3"
				},
				{
					"command": "textPowerTools.base64DecodeTextOnEachLine",
					"group": "tpt_3_base64@4"
				}
			],
			"textPowerTools.remove": [
				{
					"command": "textPowerTools.removeDuplicates",
					"group": "tpt_remove@1"
				},
				{
					"command": "textPowerTools.removeBlankLines",
					"group": "tpt_remove@2"
				},
				{
					"command": "textPowerTools.removeSurplusBlankLines",
					"group": "tpt_remove@3"
				},
				{
					"command": "textPowerTools.removeControlCharacters",
					"group": "tpt_remove@4"
				}
			]
		},
		"submenus": [
			{
				"id": "textPowerTools.editorContextMain",
				"label": "Text Power Tools"
			},
			{
				"id": "textPowerTools.filterLines",
				"label": "Filter lines (like grep)",
				"icon": "$(filter)"
			},
			{
				"id": "textPowerTools.extraction",
				"label": "Extract info",
				"icon": "$(text-size)"
			},
			{
				"id": "textPowerTools.formatContent",
				"label": "Format content",
				"icon": "$(filter)"
			},
			{
				"id": "textPowerTools.changeCase",
				"label": "Change letter case",
				"icon": "$(text-size)"
			},
			{
				"id": "textPowerTools.insertFacts",
				"label": "Insert facts"
			},
			{
				"id": "textPowerTools.insertNumbers",
				"label": "Insert numbers"
			},
			{
				"id": "textPowerTools.insertSequences",
				"label": "Insert series of items"
			},
			{
				"id": "textPowerTools.textSlots",
				"label": "Text slots (clipboard-like)"
			},
			{
				"id": "textPowerTools.convert",
				"label": "Convert"
			},
			{
				"id": "textPowerTools.encodeDecode",
				"label": "Encode/decode"
			},
			{
				"id": "textPowerTools.generateFakeContent",
				"label": "Generate fake/random content"
			},
			{
				"id": "textPowerTools.remove",
				"label": "Remove content"
			}
		],
		"configuration": {
			"type": "object",
			"title": "Text Power Tools",
			"properties": {
				"textPowerTools.caseSensitiveFiltering": {
					"type": "boolean",
					"default": false,
					"description": "Use case sensitive comparison when performing filter operations."
				},
				"textPowerTools.defaultPadString": {
					"type": "string",
					"description": "Default pad string for the 'Pad start (left)' and 'Pad end (right)' functions."
				},
				"textPowerTools.insertUppercaseHexNumbers": {
					"type": "boolean",
					"default": true,
					"description": "Insert uppercase hex numbers when using the 'Insert hex number' and other numeric functions."
				},
				"textPowerTools.insertUppercaseGuids": {
					"type": "boolean",
					"default": false,
					"description": "Insert uppercase GUIDs when using the 'Generate a GUID' or 'Generate multiple GUIDs' functions."
				},
				"textPowerTools.defaultGuidType": {
					"type": "string",
					"default": "alwaysAsk",
					"enum": [
						"alwaysAsk",
						"noDashes",
						"dashes",
						"dashesAndBraces",
						"cSharpGuidConstructor"
					],
					"description": "Type of the GUIDs inserted when using the 'Generate a GUID' or 'Generate multiple GUIDs' functions. By default the method will ask the type of GUID you want to generate."
				},
				"textPowerTools.loremIpsum.wordsPerSentence.min": {
					"type": "number",
					"minimum": 1,
					"default": 4,
					"description": "Minimum number of words in a sentence in generated Lorem ipsum texts."
				},
				"textPowerTools.loremIpsum.wordsPerSentence.max": {
					"type": "number",
					"minimum": 1,
					"default": 16,
					"description": "Maximum number of words in a sentence in generated Lorem ipsum texts."
				},
				"textPowerTools.loremIpsum.sentencesPerParagraph.min": {
					"type": "number",
					"minimum": 1,
					"default": 4,
					"description": "Minimum number of sentences in a paragraph in generated Lorem ipsum texts."
				},
				"textPowerTools.loremIpsum.sentencesPerParagraph.max": {
					"type": "number",
					"minimum": 1,
					"default": 8,
					"description": "Maximum number of sentences in a paragraph in generated Lorem ipsum texts."
				},
				"textPowerTools.customLocale": {
					"type": "string",
					"description": "Custom locale (eg. `en-US`, `hu-HU`) to use instead of system locale when running date amd time related comamnds."
				}
			}
		},
		"keybindings": [
			{
				"command": "textPowerTools.filterLinesIncludingString",
				"key": "ctrl+t f",
				"mac": "ctrl+t f",
				"when": "editorTextFocus"
			},
			{
				"command": "textPowerTools.generateRandomGuids",
				"key": "ctrl+t g",
				"mac": "ctrl+t g",
				"when": "editorTextFocus"
			}
		]
	},
	"scripts": {
		"vscode:prepublish": "webpack --mode production",
		"webpack": "webpack --mode development",
		"webpack-dev": "webpack --mode development --watch",
		"test-compile": "tsc -p ./"
	},
	"devDependencies": {
		"@types/faker": "^5.1.5",
		"@types/js-roman-numerals": "^1.1.0",
		"@types/mocha": "^2.2.42",
		"@types/node": "^12.12.0",
		"@types/node-uuid": "0.0.28",
		"@types/vscode": "^1.32.0",
		"ts-loader": "^8.0.1",
		"tslint": "^5.20.1",
		"typescript": "^3.9.7",
		"webpack": "^4.44.0",
		"webpack-cli": "^3.3.12"
	},
	"dependencies": {
		"change-case": "^3.0.2",
		"faker": "github:qcz/faker#v5.2.0-tpt-3",
		"html-entities": "^1.3.1",
		"js-base64": "^3.4.5",
		"js-roman-numerals": "^1.1.0",
		"lorem-ipsum": "^2.0.3",
		"node-uuid": "^1.4.8",
		"vscode-test": "^1.4.0",
		"zalgo-js": "^1.0.0"
	}
}
